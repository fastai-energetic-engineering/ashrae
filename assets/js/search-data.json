{
  
    
        "post0": {
            "title": "Getting Kaggle Data for ASHRAE Energy Prediction",
            "content": ". !pip install -Uqq fastbook import fastbook fastbook.setup_book() . . |████████████████████████████████| 727kB 8.1MB/s |████████████████████████████████| 194kB 35.5MB/s |████████████████████████████████| 1.2MB 36.4MB/s |████████████████████████████████| 51kB 9.3MB/s |████████████████████████████████| 61kB 10.1MB/s |████████████████████████████████| 61kB 10.9MB/s Mounted at /content/gdrive . from fastbook import * import os from google.colab import files import pandas as pd import datetime . . This notebook demonstrates how I downloaded the ASHRAE Energy Prediction Data from Kaggle. . First, we need to install the Kaggle API. . !pip install kaggle --upgrade -q . I will download the data into a folder in my google drive. First, I will set my home directory. . p = Path(&#39;drive/MyDrive/Colab Notebooks/ashrae/&#39;) os.chdir(p) # change directory . We need to download Kaggle API token and then put the .json file in .kaggle folder. We can upload the key directly from colab. . files.upload() # use this to upload your API json key !mkdir ~/.kaggle # create folder !cp kaggle.json ~/.kaggle/ # move the key into the folder !chmod 600 ~/.kaggle/kaggle.json # change permissions of the file . We can finally download the file! . os.chdir(&#39;data&#39;) # move to data folder !kaggle competitions download -c ashrae-energy-prediction . for item in os.listdir(): # for every item in the folder if item.endswith(&#39;.zip&#39;): # check if it is a .zip file file_extract(item) # if it is, then extract file os.remove(item) # and then remove the .zip . os.chdir(&quot;..&quot;) # return to initial folder . Joining Tables . Our training data comprised of three tables: . building_metadata.csv | weather_train.csv | train.csv | . We need to join the tables. First, let&#39;s see what&#39;s in the tables. . building = pd.read_csv(&#39;data/building_metadata.csv&#39;) weather = pd.read_csv(&#39;data/weather_train.csv&#39;) train = pd.read_csv(&#39;data/train.csv&#39;) . building contains the buildings&#39; metadata. . building.head() . site_id building_id primary_use square_feet year_built floor_count . 0 0 | 0 | Education | 7432 | 2008.0 | NaN | . 1 0 | 1 | Education | 2720 | 2004.0 | NaN | . 2 0 | 2 | Education | 5376 | 1991.0 | NaN | . 3 0 | 3 | Education | 23685 | 2002.0 | NaN | . 4 0 | 4 | Education | 116607 | 1975.0 | NaN | . site_id - Foreign key for the weather files. | building_id - Foreign key for training.csv | primary_use - Indicator of the primary category of activities for the building based on EnergyStar property type definitions | square_feet - Gross floor area of the building | year_built - Year building was opened | floor_count - Number of floors of the building | . weather contains weather data from the closest meteorological station. . weather.head() . site_id timestamp air_temperature cloud_coverage dew_temperature precip_depth_1_hr sea_level_pressure wind_direction wind_speed . 0 0 | 2016-01-01 00:00:00 | 25.0 | 6.0 | 20.0 | NaN | 1019.7 | 0.0 | 0.0 | . 1 0 | 2016-01-01 01:00:00 | 24.4 | NaN | 21.1 | -1.0 | 1020.2 | 70.0 | 1.5 | . 2 0 | 2016-01-01 02:00:00 | 22.8 | 2.0 | 21.1 | 0.0 | 1020.2 | 0.0 | 0.0 | . 3 0 | 2016-01-01 03:00:00 | 21.1 | 2.0 | 20.6 | 0.0 | 1020.1 | 0.0 | 0.0 | . 4 0 | 2016-01-01 04:00:00 | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | . site_id | air_temperature - Degrees Celsius | cloud_coverage - Portion of the sky covered in clouds, in oktas | dew_temperature - Degrees Celsius | precip_depth_1_hr - Millimeters | sea_level_pressure - Millibar/hectopascals | wind_direction - Compass direction (0-360) | wind_speed - Meters per second | . Finally, train contains the target variable, meter reading, which represents energy consumption in kWh. . train.head() . building_id meter timestamp meter_reading . 0 0 | 0 | 2016-01-01 00:00:00 | 0.0 | . 1 1 | 0 | 2016-01-01 00:00:00 | 0.0 | . 2 2 | 0 | 2016-01-01 00:00:00 | 0.0 | . 3 3 | 0 | 2016-01-01 00:00:00 | 0.0 | . 4 4 | 0 | 2016-01-01 00:00:00 | 0.0 | . building_id - Foreign key for the building metadata. | meter - The meter id code. Read as {0: electricity, 1: chilledwater, 2: steam, 3: hotwater}. Not every building has all meter types. | timestamp - When the measurement was taken | meter_reading - The target variable. Energy consumption in kWh (or equivalent). | . Apparently there was some issues regarding the timestamps, as noted by this post. The timestamp in the weather and meter reading table were in GMT and local time, respectively. We have to keep this in mind before merging the tables. . Here I wrote a function that can prepare train and test data accordingly. . def prepare_data(type=&#39;train&#39;): assert type in [&#39;train&#39;, &#39;test&#39;] # read data building = pd.read_csv(&#39;data/building_metadata.csv&#39;) weather = pd.read_csv(f&#39;data/weather_{type}.csv&#39;) data = pd.read_csv(f&#39;data/{type}.csv&#39;) # convert datetime data[&#39;timestamp&#39;] = pd.to_datetime(data[&#39;timestamp&#39;]) # adjust timestamp timediff = {0:4,1:0,2:7,3:4,4:7,5:0,6:4,7:4,8:4,9:5,10:7,11:4,12:0,13:5,14:4,15:4} weather[&#39;time_diff&#39;]= weather[&#39;site_id&#39;].map(timediff) weather[&#39;time_diff&#39;] = weather[&#39;time_diff&#39;].apply(lambda x: datetime.timedelta(hours=x)) weather[&#39;timestamp_gmt&#39;] = pd.to_datetime(weather[&#39;timestamp&#39;]) weather[&#39;timestamp&#39;] = weather[&#39;timestamp_gmt&#39;] - weather[&#39;time_diff&#39;] # merge table data = data.merge(building, on=&#39;building_id&#39;, how=&#39;left&#39;) data = data.merge(weather, on=[&#39;site_id&#39;,&#39;timestamp&#39;], how=&#39;left&#39;) return data . Let&#39;s try this function out! . prepare_data(&#39;train&#39;).head() . building_id meter timestamp meter_reading site_id primary_use square_feet year_built floor_count air_temperature cloud_coverage dew_temperature precip_depth_1_hr sea_level_pressure wind_direction wind_speed time_diff timestamp_gmt . 0 0 | 0 | 2016-01-01 | 0.0 | 0 | Education | 7432 | 2008.0 | NaN | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | 0 days 04:00:00 | 2016-01-01 04:00:00 | . 1 1 | 0 | 2016-01-01 | 0.0 | 0 | Education | 2720 | 2004.0 | NaN | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | 0 days 04:00:00 | 2016-01-01 04:00:00 | . 2 2 | 0 | 2016-01-01 | 0.0 | 0 | Education | 5376 | 1991.0 | NaN | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | 0 days 04:00:00 | 2016-01-01 04:00:00 | . 3 3 | 0 | 2016-01-01 | 0.0 | 0 | Education | 23685 | 2002.0 | NaN | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | 0 days 04:00:00 | 2016-01-01 04:00:00 | . 4 4 | 0 | 2016-01-01 | 0.0 | 0 | Education | 116607 | 1975.0 | NaN | 20.0 | 2.0 | 20.0 | -1.0 | 1020.0 | 250.0 | 2.6 | 0 days 04:00:00 | 2016-01-01 04:00:00 | . That&#39;s it! In the next blogpost, I will show how to load this data into FastAI&#39;s dataloaders. .",
            "url": "https://fastai-energetic-engineering.github.io/ashrae/kaggle/preprocessing/2021/06/27/Getting-ASHRAE-Energy-Prediction-Data-from-Kaggle.html",
            "relUrl": "/kaggle/preprocessing/2021/06/27/Getting-ASHRAE-Energy-Prediction-Data-from-Kaggle.html",
            "date": " • Jun 27, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "Team Energetic Engineering was formed for the Queensland AI’s FastAI course group project. We focus on tabular data analysis using the ASHRAE - Great Energy Predictor dataset from Kaggle. We are a group of energetic learners comprising (in alphabetical order): . Mikhael Manurung | Oluwakayode Olamoyegun | Owen Lamont | Roger Butler | . As part of our individual learning journeys, we each will be contributing notebooks in this site. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://fastai-energetic-engineering.github.io/ashrae/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://fastai-energetic-engineering.github.io/ashrae/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}